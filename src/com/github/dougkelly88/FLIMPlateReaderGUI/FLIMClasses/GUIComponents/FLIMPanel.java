/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.github.dougkelly88.FLIMPlateReaderGUI.FLIMClasses.GUIComponents;

import com.github.dougkelly88.FLIMPlateReaderGUI.FLIMClasses.Classes.DelayTableModel;
import com.github.dougkelly88.FLIMPlateReaderGUI.FLIMClasses.Classes.FindMaxpoint;
import com.github.dougkelly88.FLIMPlateReaderGUI.GeneralGUIComponents.SliderControl;
import com.github.dougkelly88.FLIMPlateReaderGUI.GeneralClasses.SeqAcqProps;
import com.github.dougkelly88.FLIMPlateReaderGUI.GeneralClasses.Variable;
import com.github.dougkelly88.FLIMPlateReaderGUI.GeneralGUIComponents.HCAFLIMPluginFrame;
import com.google.common.eventbus.Subscribe;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent; 
import java.io.File;
import static java.lang.Math.round; 
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JMenuItem; 
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu; 
import javax.swing.JScrollPane; 
import javax.swing.JTable; 
import javax.swing.JTextField; 
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener; 
import javax.swing.table.TableCellRenderer; 
import mmcorej.CMMCore; 
import org.jfree.chart.ChartPanel;
import org.micromanager.MMStudio;
import org.micromanager.api.events.PropertyChangedEvent; 

/**
 *
 * @author dk1109
 */
public class FLIMPanel extends javax.swing.JPanel {

    MMStudio gui_;
    CMMCore core_;
    PropertyChangedEvent event_;
    SliderControl mcpSlider_;
    SliderControl gatewidthSlider_;
    SliderControl fastDelaySlider_;
    SliderControl slowDelaySlider_;
    JTable delayTable_;
    DelayTableModel tableModel_;
    FindMaxpoint fm_;
    ChartPanel chartPanel_;
    private SeqAcqProps sap_;
    private Variable var_;
    private Object parent_;
    Object calibrationDelayBox;
    String DelayPath;
    boolean calibrationDelayBoxYesNo=true;
    private HCAFLIMPluginFrame frame;
    public Thread findMaxPointThread;
    
    
    @Subscribe
    public PropertyChangedEvent onPropertyChanged(PropertyChangedEvent event)
    {
//        FLIMTestText.setText("google eventbus triggered in device " + event.getDevice() + "\n with property " + event.getProperty() + "\n changed to value " + event.getValue());
        event_ = event;
        return event;
    }
    
    /**
     * Creates new form FLIMPanel
     */
    public FLIMPanel() {
        initComponents();
        
        gui_ = MMStudio.getInstance();
        sap_ = SeqAcqProps.getInstance().setUseScanFLIM(false);
        var_= Variable.getInstance();
        
        try {
            core_.setProperty("Delay box", "Calibrated", "Yes");
            fastBoxCalibratedCheck.setSelected(true);
        } catch (Exception ex) {
            System.out.println("Error in Delay Box Calibration: Couldn't set Delay Box Calibrated to YES.");    

        }
        
      
        setControlDefaults();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        autogateSettingsDialog = new javax.swing.JDialog();
        expectedLifetimeLabel = new javax.swing.JLabel();
        ApplyButton = new javax.swing.JButton();
        expectedLifetimeField = new javax.swing.JTextField();
        GateWidthLabel = new javax.swing.JLabel();
        numberDelaysLabel = new javax.swing.JLabel();
        laserRepRateLabel = new javax.swing.JLabel();
        laserRepRateField = new javax.swing.JTextField();
        numberDelaysField = new javax.swing.JTextField();
        gateWidthField = new javax.swing.JTextField();
        cancelButton = new javax.swing.JButton();
        HRIControlsPanel = new javax.swing.JPanel();
        mcpVoltagePanel = new javax.swing.JPanel();
        gatewidthPanel = new javax.swing.JPanel();
        inhibitCheck = new javax.swing.JCheckBox();
        FLIMToolsPanel = new javax.swing.JPanel();
        maxpointGraphPanel = new javax.swing.JPanel();
        autogateButton = new javax.swing.JButton();
        maxpointPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        maxpointButton = new javax.swing.JButton();
        maxpointResolutionField = new javax.swing.JTextField();
        acquiredMaxpointField = new javax.swing.JTextField();
        findMaxPointMinField = new javax.swing.JTextField();
        findMaxPointMaxField = new javax.swing.JTextField();
        limitsLabel1 = new javax.swing.JLabel();
        limitsLabel2 = new javax.swing.JLabel();
        limitsLabel3 = new javax.swing.JLabel();
        changeAutogateSettingsButton = new javax.swing.JButton();
        delayBoxTabbedPane = new javax.swing.JTabbedPane();
        fastDelayBoxPanel = new javax.swing.JPanel();
        fastBoxCalibratedCheck = new javax.swing.JCheckBox();
        scanDelCheck = new javax.swing.JCheckBox();
        fastCurrentDelayPanel = new javax.swing.JPanel();
        delaySeqPanel = new javax.swing.JPanel();
        clearDelayButton = new javax.swing.JButton();
        endField = new javax.swing.JTextField();
        incrementField = new javax.swing.JTextField();
        populateDelaysButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        startField = new javax.swing.JFormattedTextField();
        delayTablePanel = new javax.swing.JPanel();
        invertDataCheckBox = new javax.swing.JCheckBox();
        bleechingCompCheckBox = new javax.swing.JCheckBox();
        slowDelayBoxPanel = new javax.swing.JPanel();
        slowBoxCalibrated = new javax.swing.JCheckBox();
        slowCurrentDelayPanel = new javax.swing.JPanel();
        DelayBoxCalibrationFilePanel = new javax.swing.JPanel();
        DelayBoxCalibrationComboBox = new javax.swing.JComboBox();
        CalibrationFileLabel = new javax.swing.JLabel();
        CalibrationPathLabel = new javax.swing.JLabel();
        CalibrationPathField = new javax.swing.JTextField();
        CalibrationPathButton = new javax.swing.JButton();

        autogateSettingsDialog.setMinimumSize(new java.awt.Dimension(220, 200));

        expectedLifetimeLabel.setText("Expected lifetime [ps]:");

        ApplyButton.setText("apply");
        ApplyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ApplyButtonActionPerformed(evt);
            }
        });

        expectedLifetimeField.setText("3400");

        GateWidthLabel.setText("Gate width [ps]:");

        numberDelaysLabel.setText("Number of delays:");

        laserRepRateLabel.setText("Laser repetition rate [MHz]:");

        laserRepRateField.setText("60");

        numberDelaysField.setText("7");

        gateWidthField.setText("4000");

        cancelButton.setText("cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout autogateSettingsDialogLayout = new javax.swing.GroupLayout(autogateSettingsDialog.getContentPane());
        autogateSettingsDialog.getContentPane().setLayout(autogateSettingsDialogLayout);
        autogateSettingsDialogLayout.setHorizontalGroup(
            autogateSettingsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, autogateSettingsDialogLayout.createSequentialGroup()
                .addGroup(autogateSettingsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(autogateSettingsDialogLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(ApplyButton)
                        .addGap(18, 18, 18)
                        .addComponent(cancelButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(autogateSettingsDialogLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(autogateSettingsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(laserRepRateLabel)
                            .addComponent(numberDelaysLabel)
                            .addComponent(GateWidthLabel)
                            .addComponent(expectedLifetimeLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(autogateSettingsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(expectedLifetimeField, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE)
                            .addComponent(gateWidthField)
                            .addComponent(numberDelaysField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(laserRepRateField, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );
        autogateSettingsDialogLayout.setVerticalGroup(
            autogateSettingsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(autogateSettingsDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(autogateSettingsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(expectedLifetimeLabel)
                    .addComponent(expectedLifetimeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(autogateSettingsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(GateWidthLabel)
                    .addComponent(gateWidthField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(autogateSettingsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numberDelaysLabel)
                    .addComponent(numberDelaysField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(autogateSettingsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(laserRepRateLabel)
                    .addComponent(laserRepRateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(autogateSettingsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ApplyButton)
                    .addComponent(cancelButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        HRIControlsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("HRI controls"));

        mcpVoltagePanel.setToolTipText("Sets the microchannel plate gain voltage on the Kentech HRI. ");

        javax.swing.GroupLayout mcpVoltagePanelLayout = new javax.swing.GroupLayout(mcpVoltagePanel);
        mcpVoltagePanel.setLayout(mcpVoltagePanelLayout);
        mcpVoltagePanelLayout.setHorizontalGroup(
            mcpVoltagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 274, Short.MAX_VALUE)
        );
        mcpVoltagePanelLayout.setVerticalGroup(
            mcpVoltagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 65, Short.MAX_VALUE)
        );

        gatewidthPanel.setToolTipText("Sets the gate ON time on the Kentech HRI. ");

        javax.swing.GroupLayout gatewidthPanelLayout = new javax.swing.GroupLayout(gatewidthPanel);
        gatewidthPanel.setLayout(gatewidthPanelLayout);
        gatewidthPanelLayout.setHorizontalGroup(
            gatewidthPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 275, Short.MAX_VALUE)
        );
        gatewidthPanelLayout.setVerticalGroup(
            gatewidthPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 65, Short.MAX_VALUE)
        );

        inhibitCheck.setSelected(true);
        inhibitCheck.setText("Inhibit?");
        inhibitCheck.setToolTipText("Inhibits the HRI; uncheck to use the HRI for FLIM imaging");
        inhibitCheck.setEnabled(false);
        inhibitCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inhibitCheckActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout HRIControlsPanelLayout = new javax.swing.GroupLayout(HRIControlsPanel);
        HRIControlsPanel.setLayout(HRIControlsPanelLayout);
        HRIControlsPanelLayout.setHorizontalGroup(
            HRIControlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HRIControlsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(HRIControlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(HRIControlsPanelLayout.createSequentialGroup()
                        .addComponent(inhibitCheck)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(HRIControlsPanelLayout.createSequentialGroup()
                        .addComponent(gatewidthPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(mcpVoltagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        HRIControlsPanelLayout.setVerticalGroup(
            HRIControlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HRIControlsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(inhibitCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(HRIControlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mcpVoltagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gatewidthPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(34, Short.MAX_VALUE))
        );

        FLIMToolsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("FLIM tools"));

        maxpointGraphPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        maxpointGraphPanel.setMaximumSize(new java.awt.Dimension(630, 204));
        maxpointGraphPanel.setMinimumSize(new java.awt.Dimension(500, 100));
        maxpointGraphPanel.setPreferredSize(new java.awt.Dimension(579, 204));

        javax.swing.GroupLayout maxpointGraphPanelLayout = new javax.swing.GroupLayout(maxpointGraphPanel);
        maxpointGraphPanel.setLayout(maxpointGraphPanelLayout);
        maxpointGraphPanelLayout.setHorizontalGroup(
            maxpointGraphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 566, Short.MAX_VALUE)
        );
        maxpointGraphPanelLayout.setVerticalGroup(
            maxpointGraphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 199, Short.MAX_VALUE)
        );

        autogateButton.setText("Autogating...");
        autogateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autogateButtonActionPerformed(evt);
            }
        });

        maxpointPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel1.setText("\"Find maxpoint\" resolution (ps)");

        maxpointButton.setText("Find maxpoint");
        maxpointButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxpointButtonActionPerformed(evt);
            }
        });

        maxpointResolutionField.setText("200");
        maxpointResolutionField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                maxpointResolutionFieldFocusLost(evt);
            }
        });
        maxpointResolutionField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxpointResolutionFieldActionPerformed(evt);
            }
        });

        acquiredMaxpointField.setText("N/A");
        acquiredMaxpointField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acquiredMaxpointFieldActionPerformed(evt);
            }
        });

        findMaxPointMinField.setText("0");
        findMaxPointMinField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findMaxPointMinFieldActionPerformed(evt);
            }
        });

        findMaxPointMaxField.setText("8000");
        findMaxPointMaxField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findMaxPointMaxFieldActionPerformed(evt);
            }
        });

        limitsLabel1.setText("\"Find maxpoint\" limits (ps)");

        limitsLabel2.setText("-");

        limitsLabel3.setText("ps");

        javax.swing.GroupLayout maxpointPanelLayout = new javax.swing.GroupLayout(maxpointPanel);
        maxpointPanel.setLayout(maxpointPanelLayout);
        maxpointPanelLayout.setHorizontalGroup(
            maxpointPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(maxpointPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(maxpointPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(limitsLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(maxpointPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(findMaxPointMinField)
                    .addComponent(maxpointResolutionField, javax.swing.GroupLayout.DEFAULT_SIZE, 49, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(limitsLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(maxpointPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(maxpointPanelLayout.createSequentialGroup()
                        .addComponent(maxpointButton)
                        .addGap(13, 13, 13)
                        .addComponent(acquiredMaxpointField))
                    .addGroup(maxpointPanelLayout.createSequentialGroup()
                        .addComponent(findMaxPointMaxField, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(limitsLabel3)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        maxpointPanelLayout.setVerticalGroup(
            maxpointPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(maxpointPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(maxpointPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(maxpointButton)
                    .addComponent(maxpointResolutionField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(acquiredMaxpointField, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(maxpointPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(maxpointPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(findMaxPointMinField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(findMaxPointMaxField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(limitsLabel2)
                        .addComponent(limitsLabel3))
                    .addComponent(limitsLabel1))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        changeAutogateSettingsButton.setText("change autogate settings");
        changeAutogateSettingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeAutogateSettingsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout FLIMToolsPanelLayout = new javax.swing.GroupLayout(FLIMToolsPanel);
        FLIMToolsPanel.setLayout(FLIMToolsPanelLayout);
        FLIMToolsPanelLayout.setHorizontalGroup(
            FLIMToolsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FLIMToolsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(FLIMToolsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(maxpointGraphPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FLIMToolsPanelLayout.createSequentialGroup()
                        .addComponent(maxpointPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(FLIMToolsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(autogateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(changeAutogateSettingsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        FLIMToolsPanelLayout.setVerticalGroup(
            FLIMToolsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FLIMToolsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(maxpointGraphPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(FLIMToolsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(FLIMToolsPanelLayout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(autogateButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(changeAutogateSettingsButton)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FLIMToolsPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(maxpointPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        fastBoxCalibratedCheck.setText("Calibrated?");
        fastBoxCalibratedCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fastBoxCalibratedCheckActionPerformed(evt);
            }
        });
        fastBoxCalibratedCheck.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                fastBoxCalibratedCheckPropertyChange(evt);
            }
        });

        scanDelCheck.setText("Enable fast delay sequences?");
        scanDelCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scanDelCheckActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout fastCurrentDelayPanelLayout = new javax.swing.GroupLayout(fastCurrentDelayPanel);
        fastCurrentDelayPanel.setLayout(fastCurrentDelayPanelLayout);
        fastCurrentDelayPanelLayout.setHorizontalGroup(
            fastCurrentDelayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 275, Short.MAX_VALUE)
        );
        fastCurrentDelayPanelLayout.setVerticalGroup(
            fastCurrentDelayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 65, Short.MAX_VALUE)
        );

        delaySeqPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Delay sequence"));

        clearDelayButton.setText("Clear delays");
        clearDelayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearDelayButtonActionPerformed(evt);
            }
        });

        endField.setText("16000");
        endField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                endFieldFocusLost(evt);
            }
        });
        endField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endFieldActionPerformed(evt);
            }
        });
        endField.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                endFieldPropertyChange(evt);
            }
        });

        incrementField.setText("25");
        incrementField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                incrementFieldFocusLost(evt);
            }
        });
        incrementField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                incrementFieldActionPerformed(evt);
            }
        });

        populateDelaysButton.setText("Populate delays");
        populateDelaysButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                populateDelaysButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Start (ps):");

        jLabel3.setText("End (ps):");

        jLabel4.setText("Increment:");

        startField.setText("0");
        startField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                startFieldFocusLost(evt);
            }
        });
        startField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startFieldActionPerformed(evt);
            }
        });
        startField.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                startFieldPropertyChange(evt);
            }
        });

        javax.swing.GroupLayout delayTablePanelLayout = new javax.swing.GroupLayout(delayTablePanel);
        delayTablePanel.setLayout(delayTablePanelLayout);
        delayTablePanelLayout.setHorizontalGroup(
            delayTablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 140, Short.MAX_VALUE)
        );
        delayTablePanelLayout.setVerticalGroup(
            delayTablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        invertDataCheckBox.setText("Invert table");
        invertDataCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                invertDataCheckBoxActionPerformed(evt);
            }
        });

        bleechingCompCheckBox.setText("Bleeching comp.");
        bleechingCompCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bleechingCompCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout delaySeqPanelLayout = new javax.swing.GroupLayout(delaySeqPanel);
        delaySeqPanel.setLayout(delaySeqPanelLayout);
        delaySeqPanelLayout.setHorizontalGroup(
            delaySeqPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(delaySeqPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(delayTablePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(delaySeqPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(delaySeqPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(delaySeqPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(populateDelaysButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(clearDelayButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(delaySeqPanelLayout.createSequentialGroup()
                        .addGroup(delaySeqPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(delaySeqPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(endField)
                            .addComponent(incrementField)
                            .addComponent(startField))
                        .addGap(10, 10, 10))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, delaySeqPanelLayout.createSequentialGroup()
                        .addGroup(delaySeqPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(invertDataCheckBox, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bleechingCompCheckBox, javax.swing.GroupLayout.Alignment.LEADING))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        delaySeqPanelLayout.setVerticalGroup(
            delaySeqPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(delaySeqPanelLayout.createSequentialGroup()
                .addComponent(clearDelayButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(delaySeqPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(startField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(delaySeqPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(endField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(delaySeqPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(incrementField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(populateDelaysButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(invertDataCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bleechingCompCheckBox)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(delaySeqPanelLayout.createSequentialGroup()
                .addComponent(delayTablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout fastDelayBoxPanelLayout = new javax.swing.GroupLayout(fastDelayBoxPanel);
        fastDelayBoxPanel.setLayout(fastDelayBoxPanelLayout);
        fastDelayBoxPanelLayout.setHorizontalGroup(
            fastDelayBoxPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fastDelayBoxPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(fastDelayBoxPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fastBoxCalibratedCheck)
                    .addComponent(fastCurrentDelayPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(scanDelCheck))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(delaySeqPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18))
        );
        fastDelayBoxPanelLayout.setVerticalGroup(
            fastDelayBoxPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fastDelayBoxPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(fastDelayBoxPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(fastDelayBoxPanelLayout.createSequentialGroup()
                        .addComponent(delaySeqPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(fastDelayBoxPanelLayout.createSequentialGroup()
                        .addComponent(fastBoxCalibratedCheck)
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addComponent(fastCurrentDelayPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(scanDelCheck)
                        .addGap(20, 20, 20))))
        );

        delayBoxTabbedPane.addTab("Fast delay box", fastDelayBoxPanel);

        slowBoxCalibrated.setText("Calibrated?");
        slowBoxCalibrated.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                slowBoxCalibratedStateChanged(evt);
            }
        });

        javax.swing.GroupLayout slowCurrentDelayPanelLayout = new javax.swing.GroupLayout(slowCurrentDelayPanel);
        slowCurrentDelayPanel.setLayout(slowCurrentDelayPanelLayout);
        slowCurrentDelayPanelLayout.setHorizontalGroup(
            slowCurrentDelayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 345, Short.MAX_VALUE)
        );
        slowCurrentDelayPanelLayout.setVerticalGroup(
            slowCurrentDelayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 65, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout slowDelayBoxPanelLayout = new javax.swing.GroupLayout(slowDelayBoxPanel);
        slowDelayBoxPanel.setLayout(slowDelayBoxPanelLayout);
        slowDelayBoxPanelLayout.setHorizontalGroup(
            slowDelayBoxPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(slowDelayBoxPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(slowDelayBoxPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(slowBoxCalibrated)
                    .addComponent(slowCurrentDelayPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(261, Short.MAX_VALUE))
        );
        slowDelayBoxPanelLayout.setVerticalGroup(
            slowDelayBoxPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(slowDelayBoxPanelLayout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(slowBoxCalibrated)
                .addGap(18, 56, Short.MAX_VALUE)
                .addComponent(slowCurrentDelayPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(91, Short.MAX_VALUE))
        );

        delayBoxTabbedPane.addTab("Slow delay box", slowDelayBoxPanel);

        DelayBoxCalibrationComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        DelayBoxCalibrationComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DelayBoxCalibrationComboBoxActionPerformed(evt);
            }
        });

        CalibrationFileLabel.setText("Calibration Files:");

        CalibrationPathLabel.setText("Calibration file folder path");

        CalibrationPathField.setText("DelayPath");
        CalibrationPathField.setMaximumSize(new java.awt.Dimension(229, 20));
        CalibrationPathField.setPreferredSize(new java.awt.Dimension(500, 20));
        CalibrationPathField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CalibrationPathFieldActionPerformed(evt);
            }
        });

        CalibrationPathButton.setText("Chose Path");
        CalibrationPathButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CalibrationPathButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout DelayBoxCalibrationFilePanelLayout = new javax.swing.GroupLayout(DelayBoxCalibrationFilePanel);
        DelayBoxCalibrationFilePanel.setLayout(DelayBoxCalibrationFilePanelLayout);
        DelayBoxCalibrationFilePanelLayout.setHorizontalGroup(
            DelayBoxCalibrationFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DelayBoxCalibrationFilePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(DelayBoxCalibrationFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(DelayBoxCalibrationComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CalibrationFileLabel)
                    .addGroup(DelayBoxCalibrationFilePanelLayout.createSequentialGroup()
                        .addComponent(CalibrationPathLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(CalibrationPathButton))
                    .addComponent(CalibrationPathField, javax.swing.GroupLayout.PREFERRED_SIZE, 502, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(104, Short.MAX_VALUE))
        );
        DelayBoxCalibrationFilePanelLayout.setVerticalGroup(
            DelayBoxCalibrationFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DelayBoxCalibrationFilePanelLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(CalibrationFileLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DelayBoxCalibrationComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 111, Short.MAX_VALUE)
                .addGroup(DelayBoxCalibrationFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CalibrationPathLabel)
                    .addComponent(CalibrationPathButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CalibrationPathField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );

        delayBoxTabbedPane.addTab("Delay box calibration file", DelayBoxCalibrationFilePanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(HRIControlsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(FLIMToolsPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(delayBoxTabbedPane, javax.swing.GroupLayout.Alignment.LEADING)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(delayBoxTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(FLIMToolsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(HRIControlsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void inhibitCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inhibitCheckActionPerformed
        String str = "";
        if (inhibitCheck.isSelected())
                str = "Inhibited";
        else 
            str = "Running";
        try{
            core_.setProperty("Delay box", "Inhibit", str);
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_inhibitCheckActionPerformed

    private void maxpointResolutionFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxpointResolutionFieldActionPerformed
        int num = Integer.parseInt(maxpointResolutionField.getText());
        num=num/25*25;
        if(num<25){
        num=25;
        }
        maxpointResolutionField.setText(Integer.toString(num));
        fm_.setResolution(num);
    }//GEN-LAST:event_maxpointResolutionFieldActionPerformed

    private void maxpointButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxpointButtonActionPerformed
        frame = HCAFLIMPluginFrame.getInstance();
        
        // set progress bar to start       
        frame.progressBar_.setStart("Find max point");
        // starts sequence in new thread
        findMaxPointThread =new Thread(new findMaxPointThread(this));
        findMaxPointThread.start();
        
        
    }//GEN-LAST:event_maxpointButtonActionPerformed

    public void findMaxPoint(){
            // stop live mode
        if (gui_.isLiveModeOn() | gui_.isAcquisitionRunning()){
                gui_.enableLiveMode(false);
                gui_.closeAllAcquisitions();
            }    
        int findMaxPointMin=(int) Double.parseDouble(findMaxPointMinField.getText());
        int findMaxPointMax=(int) Double.parseDouble(findMaxPointMaxField.getText());
        fm_.xMax=findMaxPointMax;
        fm_.xMin=findMaxPointMin;
        int delayResolution=Integer.parseInt(maxpointResolutionField.getText());
            ArrayList<Double> meanValues= new ArrayList<Double>();
            ArrayList<Integer> delays = new ArrayList<Integer>();
        int endOk=0;
            try {  
            for(int delay=findMaxPointMin; delay<findMaxPointMax; delay=delay+delayResolution){
                if(frame.terminate){
                   frame.setStopButtonFalse(delay, findMaxPointMax, "Find max point");
                   endOk=0;
                   break;
                }
                    core_.setProperty("Delay box", "Delay (ps)", delay);
                    core_.sleep(200);
                    meanValues.add(fm_.getMeanValueOfImage(core_));
                    delays.add(delay);
                    frame.progressBar_.stepIncrement(delay-findMaxPointMin, findMaxPointMax-findMaxPointMin);
            
                //reset to previous delay 
                core_.setProperty("Delay box", "Delay (ps)", fastDelaySlider_.getValue());
                 endOk=1;  
            }
                } catch (Exception ex) {
                    Logger.getLogger(FLIMPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            //System.out.print(meanValues);
            
            fm_.acqMaxpointData(delays, meanValues);
                    
            acquiredMaxpointField.setText(fm_.getAcquiredMaxpointValue()); //display the acquired maxpoint value to the corresponding field 

            if(endOk==1){
                frame.progressBar_.setEnd("Find max point");
            }
            
    }
    
    private void maxpointResolutionFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_maxpointResolutionFieldFocusLost
        int num = Integer.parseInt(maxpointResolutionField.getText());
        fm_.setResolution(num);
    }//GEN-LAST:event_maxpointResolutionFieldFocusLost

    private void autogateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autogateButtonActionPerformed
        tableModel_.addWholeData(fm_.genAutogates(fm_.getAcquiredMaxpointValue()));
        // test
    }//GEN-LAST:event_autogateButtonActionPerformed

    private void DelayBoxCalibrationComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DelayBoxCalibrationComboBoxActionPerformed
        String file="nope";
        try {
            String setval = (String) DelayBoxCalibrationComboBox.getSelectedItem();
            file = DelayPath+"\\"+setval;
            // only send command if combo has been properly populated
            if (setval != null) {
                setDelayBox(file, 1);
                core_.setProperty("Delay box", "CalibrationPath", file);
                core_.setProperty("Delay box", "Calibrated", "Yes");
                fastBoxCalibratedCheck.setSelected(true);
                CalibrationPathField.setText(file);
            }
            // TODO: implement updating of var_ here rather than in individual actionlisteners?
        } catch (Exception e) {
            System.out.println("Error in Delay Box Calibration: Couldn't set Delay Box Calibrated to YES.");    

        }
        
    }//GEN-LAST:event_DelayBoxCalibrationComboBoxActionPerformed

    private void slowBoxCalibratedStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slowBoxCalibratedStateChanged
        var_.slowBoxCalibratedCheck=slowBoxCalibrated.isSelected();
        // TODO add your handling code here:
    }//GEN-LAST:event_slowBoxCalibratedStateChanged

    private void startFieldPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_startFieldPropertyChange

    }//GEN-LAST:event_startFieldPropertyChange

    private void startFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startFieldActionPerformed
        updateDelayField(startField);
    }//GEN-LAST:event_startFieldActionPerformed

    private void startFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_startFieldFocusLost
        updateDelayField(startField);
    }//GEN-LAST:event_startFieldFocusLost

    private void populateDelaysButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_populateDelaysButtonActionPerformed
        int incr;
        incr = Integer.parseInt(incrementField.getText());
        if (incr <= 0)
        {
            JOptionPane.showMessageDialog(null, "Increment should be larger than 0!", "Error",
                                    JOptionPane.ERROR_MESSAGE); //send out error message 'Increment should be larger than 0!'
            incrementField.setText("25");
        }
        else{
        int max;
        int min;
        ArrayList<Integer> dv = new ArrayList<Integer>();

        // deal with case in which start and end have been entered the wrong way round...
        if (Integer.parseInt(startField.getText()) > Integer.parseInt(endField.getText()))
        {
            max = Integer.parseInt(startField.getText());
            min = Integer.parseInt(endField.getText());
            startField.setText(String.valueOf(min));
            endField.setText(String.valueOf(max));
        }
        else{
            max = Integer.parseInt(endField.getText());
            min = Integer.parseInt(startField.getText());
        }
        
        for (int i = min; i < max+1; i = i + incr)
        {
            dv.add(i);
        }
        
        tableModel_.addWholeData(dv);
        }
        //var_.delays=dv;
    }//GEN-LAST:event_populateDelaysButtonActionPerformed

    private void incrementFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_incrementFieldActionPerformed
        updateDelayField(incrementField);
    }//GEN-LAST:event_incrementFieldActionPerformed

    private void incrementFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_incrementFieldFocusLost
        updateDelayField(incrementField);
    }//GEN-LAST:event_incrementFieldFocusLost

    private void endFieldPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_endFieldPropertyChange
        updateDelayField(endField);
    }//GEN-LAST:event_endFieldPropertyChange

    private void endFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endFieldActionPerformed
        updateDelayField(endField);
    }//GEN-LAST:event_endFieldActionPerformed

    private void endFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_endFieldFocusLost
        updateDelayField(endField);
    }//GEN-LAST:event_endFieldFocusLost

    private void clearDelayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearDelayButtonActionPerformed
        tableModel_.clearAllData();
    }//GEN-LAST:event_clearDelayButtonActionPerformed

    private void scanDelCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scanDelCheckActionPerformed
        sap_ = sap_.setUseScanFLIM(scanDelCheck.isSelected());
        var_.scanDelCheck=scanDelCheck.isSelected();
    }//GEN-LAST:event_scanDelCheckActionPerformed

    private void fastBoxCalibratedCheckPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_fastBoxCalibratedCheckPropertyChange
        var_.fastBoxCalibratedCheck=fastBoxCalibratedCheck.isSelected();
        // TODO add your handling code here:
    }//GEN-LAST:event_fastBoxCalibratedCheckPropertyChange

    private void CalibrationPathButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CalibrationPathButtonActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Select target directory from delay box calibration files, something like (C:/Program Files/Micro-Manager-1.4/mmplugins/OpenHCAFLIM/KentechCalibration)");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        Component parentFrame = null;
        int returnVal = chooser.showOpenDialog(parentFrame);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            DelayPath = chooser.getSelectedFile().getPath();
            }
        
        DelayBoxCalibrationComboBox.removeAllItems();
        File[] files = new File(DelayPath).listFiles();
        for (File file : files) {
            if (file.isFile()) {
            DelayBoxCalibrationComboBox.addItem(file.getName());
            }
        }
        CalibrationPathField.setText(DelayPath);
    }//GEN-LAST:event_CalibrationPathButtonActionPerformed

    private void fastBoxCalibratedCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fastBoxCalibratedCheckActionPerformed
        calibrationDelayBoxYesNo=fastBoxCalibratedCheck.isSelected();
        if(calibrationDelayBoxYesNo==true){
            try {
                core_.setProperty("Delay box", "Calibrated", "Yes");
            } catch (Exception ex) {
                System.out.println("Error in Delay Box Calibration: Couldn't set Delay Box Calibrated to YES.");    
            }
        }
    }//GEN-LAST:event_fastBoxCalibratedCheckActionPerformed

    private void bleechingCompCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bleechingCompCheckBoxActionPerformed
        if(bleechingCompCheckBox.isSelected()){
            tableModel_.bleechingComp();
        //    System.out.println(tableModel_.bleechingComp());
        } else {
            tableModel_.undoBleechingComp();
        }
    }//GEN-LAST:event_bleechingCompCheckBoxActionPerformed

    private void invertDataCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_invertDataCheckBoxActionPerformed
        tableModel_.invertData();
        
    }//GEN-LAST:event_invertDataCheckBoxActionPerformed

    private void CalibrationPathFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CalibrationPathFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CalibrationPathFieldActionPerformed

    private void findMaxPointMinFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findMaxPointMinFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_findMaxPointMinFieldActionPerformed

    private void findMaxPointMaxFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findMaxPointMaxFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_findMaxPointMaxFieldActionPerformed

    private void changeAutogateSettingsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeAutogateSettingsButtonActionPerformed
        autogateSettingsDialog.setVisible(true);
    }//GEN-LAST:event_changeAutogateSettingsButtonActionPerformed

    private void ApplyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ApplyButtonActionPerformed
        fm_.changeLifetime(Integer.parseInt(expectedLifetimeField.getText()));
        fm_.changeGateWidth(Integer.parseInt(gateWidthField.getText()));
        fm_.changeNumDelays(Integer.parseInt(numberDelaysField.getText()));
        fm_.changeRepRate(Integer.parseInt(laserRepRateField.getText()));
        tableModel_.addWholeData(fm_.genAutogates(fm_.getAcquiredMaxpointValue()));
    }//GEN-LAST:event_ApplyButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
       autogateSettingsDialog.dispose(); 
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void acquiredMaxpointFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acquiredMaxpointFieldActionPerformed
        fm_.changePeakIntensityPoint(Integer.parseInt(acquiredMaxpointField.getText()));
    }//GEN-LAST:event_acquiredMaxpointFieldActionPerformed

    public void setDelayComboBox(){
        String file1 = null;
        File FileCalibrationDelayBox=new File(".").getAbsoluteFile();
        String stringFileCalibrationDelayBox=FileCalibrationDelayBox.getAbsolutePath();
        int aa=stringFileCalibrationDelayBox.length();
        stringFileCalibrationDelayBox=stringFileCalibrationDelayBox.substring(0, aa-2);
       // stringFileCalibrationDelayBox.substring(0, 5);
        DelayPath=stringFileCalibrationDelayBox+"\\mmplugins\\OpenHCAFLIM\\KentechCalibration";
        DelayBoxCalibrationComboBox.removeAllItems();
         
        File[] files = new File(DelayPath).listFiles();
        for (File file : files) {
            if (file.isFile()) {
            DelayBoxCalibrationComboBox.addItem(file.getName());
            }
            
        }
            gui_.registerForEvents(this);
            core_ = gui_.getCore();
            file1 = DelayPath+"\\HDG800Calibration41MHz_Fianium.csv";
            setDelayBox(file1, 0);

    }
    
    private void setDelayBox(String file, int x) {
        try {
            core_.setProperty("Delay box", "CalibrationPath", file);
            core_.setProperty("Delay box", "Calibrated", "Yes");
            fastBoxCalibratedCheck.setSelected(true);
            if(x==0){
                DelayBoxCalibrationComboBox.setSelectedItem("HDG800Calibration41MHz_Fianium.csv");
            }
            CalibrationPathField.setText(file);
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
    }
    
    private void updateDelayField(JTextField field){
        int num = 0;
        int min = 0;
        int max = 16666;
        int inc  = 1;
        
        try{max = Integer.parseInt(core_.getProperty("Laser", "Frequency"));}
        catch (Exception e){}
        
        if (!field.getText().isEmpty()){
            num = Integer.parseInt(field.getText());
            if (num > max)
                num = max;
            else if (num < min)
                num = min;
            num = round(num/inc)*inc;
        }
        else {
            num = min;
        }
        field.setText(String.valueOf(num));
    }
    
    
    private String test(String dev, String prop)
    {
        String out;
        try{out = core_.getProperty(dev, prop);}
        catch (Exception e){out = "Error:" + e.getMessage();}
        return out;
    }
    
    private void setControlDefaults(){
        
        String[] colName = { "Delays (ps)" };
        int max = 16666;
        try{max = Integer.parseInt(core_.getProperty("Laser", "Frequency"));}
        catch (Exception e){}

        tableModel_ = new DelayTableModel(colName, (sap_.getDelaysArray()).get(0), 0, max, 1);
        tableModel_.addTableModelListener(new TableModelListener() {
           @Override
            public void tableChanged(TableModelEvent e) {
                sap_.setDelaysArray(0, tableModel_.getData());
                fm_.setGatingData((sap_.getDelaysArray()).get(0));
                var_.delays=tableModel_.getData();
            }
        });
         delayTable_ = new JTable(){
             @Override
                    public Component prepareRenderer(TableCellRenderer renderer, int row, int column) {
                        Component comp = super.prepareRenderer(renderer, row, column);
                        int modelRow = convertRowIndexToModel(row);
                        int modelColumn = convertColumnIndexToModel(column);
                        if (modelColumn != 0 && modelRow != 0) {
                            comp.setBackground(Color.GREEN);
                        }
                        
                        return comp;
                    }
         };
         delayTable_.setModel(tableModel_);
         delayTable_.setSurrendersFocusOnKeystroke(true);
         delayTable_.putClientProperty("terminateEditOnFocusLost", Boolean.TRUE);
         

         JScrollPane scroller = new javax.swing.JScrollPane(delayTable_);
         delayTable_.setPreferredScrollableViewportSize(new java.awt.Dimension(60, 100));
         delayTablePanel.setLayout(new BorderLayout());
         delayTablePanel.add(scroller, BorderLayout.CENTER);
        
        final JPopupMenu popupMenu = new JPopupMenu();
        JMenuItem deleteItem = new JMenuItem("Delete delay");
        deleteItem.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                int r = delayTable_.getSelectedRow();
                tableModel_.removeRow(r);
            }            
        });
        JMenuItem addItem = new JMenuItem("Add delay");
        addItem.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                int r = delayTable_.getSelectedRow();
                tableModel_.insertRow(r+1, 0);
            }            
        });
        popupMenu.add(addItem);
        popupMenu.add(deleteItem);
        delayTable_.addMouseListener( new MouseAdapter()
        {
            public void mousePressed(MouseEvent e)
            {
//                System.out.println("pressed");
            }

            public void mouseReleased(MouseEvent e)
            {
                if (e.isPopupTrigger())
                {
                    JTable source = (JTable)e.getSource();
                    int row = source.rowAtPoint( e.getPoint() );
                    int column = source.columnAtPoint( e.getPoint() );

                    if (! source.isRowSelected(row))
                        source.changeSelection(row, column, false, false);

                    popupMenu.show(e.getComponent(), e.getX(), e.getY());
                }
            }
        });
         
        // Set up slider controls
        mcpSlider_ = new SliderControl("MCP voltage (V)",300,850,750);
        // TODO: deal with changing limits when calibrated/uncalibrated
        mcpVoltagePanel.setLayout(new BorderLayout());
        mcpVoltagePanel.add(mcpSlider_, BorderLayout.SOUTH);
        mcpSlider_.addPropertyChangeListener(new java.beans.PropertyChangeListener() {

            @Override
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                mcpSliderPropertyChange(evt);
            }
        });
        
        gatewidthSlider_ = new SliderControl("Gate width (ps)", 200, 7000, 3000);
        gatewidthPanel.setLayout(new BorderLayout());
        gatewidthPanel.add(gatewidthSlider_, BorderLayout.SOUTH);
        gatewidthSlider_.addPropertyChangeListener(new java.beans.PropertyChangeListener() {

            @Override
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                gatewidthSliderPropertyChange(evt);
            }
        });
        
        HRIControlsPanel.revalidate();
        HRIControlsPanel.repaint();
        
        slowDelaySlider_ = new SliderControl("Current delay setting (ps)",0,20000,0);
        slowCurrentDelayPanel.setLayout(new BorderLayout());
        slowCurrentDelayPanel.add(slowDelaySlider_, BorderLayout.SOUTH);
        slowDelaySlider_.addPropertyChangeListener(new java.beans.PropertyChangeListener() {

            @Override
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                slowDelaySlider_.setValue(tableModel_.validateData(slowDelaySlider_.getValue().intValue()));
                slowDelaySliderPropertyChange(evt);
            }
        });
        
        fastDelaySlider_ = new SliderControl("Current delay setting (ps)",0,20000,0);
        fastCurrentDelayPanel.setLayout(new BorderLayout());
        fastCurrentDelayPanel.add(fastDelaySlider_, BorderLayout.SOUTH);
        fastDelaySlider_.addPropertyChangeListener(new java.beans.PropertyChangeListener() {

            @Override
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                fastDelaySlider_.setValue(tableModel_.validateData(fastDelaySlider_.getValue().intValue()));
                fastDelaySliderPropertyChange(evt);
                
            }
        });
        
        delayBoxTabbedPane.revalidate();
        delayBoxTabbedPane.repaint();
        
        fm_ = new FindMaxpoint();
        maxpointGraphPanel.setLayout(new BorderLayout());
        chartPanel_ = new ChartPanel(fm_.getChart());
        maxpointGraphPanel.add(chartPanel_, BorderLayout.NORTH);
        // for some reason maxpointGraphPanel's height and width are returned 0
        // so hardcode for now...
        chartPanel_.setMaximumDrawWidth(500);
        chartPanel_.setMaximumDrawHeight(200);
        chartPanel_.setPreferredSize(new Dimension(500,200));
     
        
        // Set values for other controls based on underlying data to ensure
        // that all controls are in a consistent state. 
        scanDelCheck.setSelected(sap_.getUseScanFLIM());
        
    }
    
    private void mcpSliderPropertyChange(java.beans.PropertyChangeEvent evt) {
        var_.mcpSlider= mcpSlider_.getValue();
        
        try{
            core_.setProperty("Delay box", "Gain", mcpSlider_.getValue());
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
        
    }                                        
    
    private void gatewidthSliderPropertyChange(java.beans.PropertyChangeEvent evt) {
        var_.gatewidthSlider= gatewidthSlider_.getValue();
//        FLIMTestText.setText("Gatewidth value = " + gatewidthSlider_.getValue());
        try{
            core_.setProperty("Delay box", "Width", gatewidthSlider_.getValue());
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
        
    }        
    
    private void fastDelaySliderPropertyChange(java.beans.PropertyChangeEvent evt){
        var_.fastDelaySlider= fastDelaySlider_.getValue();
        try {
            core_.setProperty("Delay box", "Delay (ps)", fastDelaySlider_.getValue());
        } catch (Exception e){
            System.out.println(e.getMessage());
        }
        
    }
    
    private void slowDelaySliderPropertyChange(java.beans.PropertyChangeEvent evt){
        var_.slowDelaySlider= slowDelaySlider_.getValue();
//        FLIMTestText.setText("Slow delay value = " + slowDelaySlider_.getValue());
    }
    
    public void setLoadedSoftwareValues(){
        // searching label of property in SoftwareConfig and set values in FLIMPanle
        scanDelCheck.setSelected(Boolean.parseBoolean(var_.findLabelOfProperty("Fast Current Delay Setting")));
        fastBoxCalibratedCheck.setSelected(Boolean.parseBoolean(var_.findLabelOfProperty("Calibrate? (fastBox)")));
        slowBoxCalibrated.setSelected(Boolean.parseBoolean(var_.findLabelOfProperty("Calibrate? (slowBox)")));
        mcpSlider_.setValue((int) Double.parseDouble(var_.findLabelOfProperty("MCP Voltage")));
        gatewidthSlider_.setValue((int) Double.parseDouble((var_.findLabelOfProperty("Gate Width"))));
        fastDelaySlider_.setValue((int) Double.parseDouble((var_.findLabelOfProperty("Fast Current Delay Setting"))));
        slowDelaySlider_.setValue((int) Double.parseDouble((var_.findLabelOfProperty("Slow Current Delay Setting"))));
        tableModel_.addWholeData(var_.findLabelOfPropertyForArrayList("Delay Sequence in [ps]"));
    }
    
    public void setParent(Object o){
        parent_ = o;
    }
    
    public ArrayList<Integer> getDelays(){
        return tableModel_.getData();
    }

    public Double getCurrentDelay(){
        return fastDelaySlider_.getValue();
    }
    
    public void setCurrentDelay(Double Delay_to_set){
        fastDelaySlider_.setValue(Delay_to_set.intValue());
    }
    
    public void updatePanel(){
        // do something when FLIMPanel is selected
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ApplyButton;
    private javax.swing.JLabel CalibrationFileLabel;
    private javax.swing.JButton CalibrationPathButton;
    private javax.swing.JTextField CalibrationPathField;
    private javax.swing.JLabel CalibrationPathLabel;
    private javax.swing.JComboBox DelayBoxCalibrationComboBox;
    private javax.swing.JPanel DelayBoxCalibrationFilePanel;
    private javax.swing.JPanel FLIMToolsPanel;
    private javax.swing.JLabel GateWidthLabel;
    private javax.swing.JPanel HRIControlsPanel;
    private javax.swing.JTextField acquiredMaxpointField;
    private javax.swing.JButton autogateButton;
    private javax.swing.JDialog autogateSettingsDialog;
    private javax.swing.JCheckBox bleechingCompCheckBox;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton changeAutogateSettingsButton;
    private javax.swing.JButton clearDelayButton;
    private javax.swing.JTabbedPane delayBoxTabbedPane;
    private javax.swing.JPanel delaySeqPanel;
    private javax.swing.JPanel delayTablePanel;
    private javax.swing.JTextField endField;
    private javax.swing.JTextField expectedLifetimeField;
    private javax.swing.JLabel expectedLifetimeLabel;
    private javax.swing.JCheckBox fastBoxCalibratedCheck;
    private javax.swing.JPanel fastCurrentDelayPanel;
    private javax.swing.JPanel fastDelayBoxPanel;
    private javax.swing.JTextField findMaxPointMaxField;
    private javax.swing.JTextField findMaxPointMinField;
    private javax.swing.JTextField gateWidthField;
    private javax.swing.JPanel gatewidthPanel;
    private javax.swing.JTextField incrementField;
    private javax.swing.JCheckBox inhibitCheck;
    private javax.swing.JCheckBox invertDataCheckBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField laserRepRateField;
    private javax.swing.JLabel laserRepRateLabel;
    private javax.swing.JLabel limitsLabel1;
    private javax.swing.JLabel limitsLabel2;
    private javax.swing.JLabel limitsLabel3;
    private javax.swing.JButton maxpointButton;
    private javax.swing.JPanel maxpointGraphPanel;
    private javax.swing.JPanel maxpointPanel;
    private javax.swing.JTextField maxpointResolutionField;
    private javax.swing.JPanel mcpVoltagePanel;
    private javax.swing.JTextField numberDelaysField;
    private javax.swing.JLabel numberDelaysLabel;
    private javax.swing.JButton populateDelaysButton;
    private javax.swing.JCheckBox scanDelCheck;
    private javax.swing.JCheckBox slowBoxCalibrated;
    private javax.swing.JPanel slowCurrentDelayPanel;
    private javax.swing.JPanel slowDelayBoxPanel;
    private javax.swing.JFormattedTextField startField;
    // End of variables declaration//GEN-END:variables

    private Object File(String string) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }


}

